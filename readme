Lists of endpoints and payloads

If is anny error all response have code != 2xx
and struct :
{
"message" : "Details about error"
}


/student:POST
request:

{
	"name": "john",
	"surname": "doe",
	"email": "john@doe.com"
}

Fields name, surname and email are type of string and are required.

Response:
If created - http code 201.

/student:DELETE
{
    "id": 11
}

ID is required and is type of integer.
Response - http code 200

/student:PUT
{
	"id": 12,
	"name": "john",
	"surname": "doe",
	"email": "john@doe.com"
}

All fields are required. Id is Integer other are string.
Response HttpCode 200

/student:GET
{
    "id": 12
}

id param is optional. Type is integer. If payload is empty endpoint return list of all students and httpCode 200.


/result:POST
{
	"studentId": 12,
	"points": 2,
	"grade": "dobry",
	"comment": "test"
}

StudentId and points are integer. grade is enum with values : bardzo dobry, dobry, dostateczny, dopuszczajacy, niedostateczny.
comment is string type and is optional. Other are required.

Respone : http 201

/result:PUT
{
	"studentId": 12,
	"id": 4,
	"points": 2,
	"grade": "dobry",
	"comment": "test"
}

StudentId, id and points are integer. grade is enum with values : bardzo dobry, dobry, dostateczny, dopuszczajacy, niedostateczny.
comment is string type and is optional. Other are required.

Respone : http 200

/result:GET
{
    "id": 12
}

id param is optional. Type is integer. If payload is empty endpoint return list of all results with students data and httpCode 200.

/result:DELETE
{
    "id": 11
}

ID is required and is type of integer.
Response - http code 200


Comments:
I know that deleting is incorrect - should be removed only logical (flag Active true/false) but i have limited time for do this task,
so I resigned from iplement a soft delete.

Test - is only one for example and show that i know how to write tests. Its only positive case. For negative case i should pass for example other type of exception, or string.
To data provider is possible add more cases.

Endpoints should by covered by functional tests - should checking results for inputs - positive and negative cases.

In integrations with other services we should mock responses for example using mockery and partitial mock.

In this code is a lot to do , but the time is limited, so thing what should be do better:
soft delete,
relations in DB by migrations, and keys on DB.
more validations for example strip html tags and cut of js code from names (Any midleware before seter?)
any API authentyfication now everybody can use endpoints,
allow cors in config

